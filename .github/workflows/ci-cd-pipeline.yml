name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TIMEOUT_MINUTES: 30

jobs:
  test:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      
    - name: Set up Python
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
        
    - name: Test API endpoints
      run: python test_api.py

  build:
    needs: test
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226
      
    - name: Login to Docker Hub
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934
      with:
        images: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-ml-app
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=FastAPI ML App
          org.opencontainers.image.description=Application FastAPI pour prédictions ML
          
    - name: Build and push Docker image
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -p 8080:6670 \
          ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-ml-app:latest
        
        sleep 15
        
        curl -f http://localhost:8080/ || exit 1
        
        response=$(curl -s -f "http://localhost:8080/predict?size=180&nb_rooms=3&garden=true")
        if echo "$response" | grep -q "y_pred"; then
          echo "Test de prédiction réussi"
        else
          echo "Test de prédiction échoué"
          exit 1
        fi
        
        docker stop test-container

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      
    steps:
    - name: Deploy to production VM
      uses: appleboy/ssh-action@55dabf81b49d4120609345970c91507e2d734799
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        password: ${{ secrets.VM_PASSWORD }}
        timeout: 60s
        script: |
          set -e
          
          IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-ml-app:latest"
          CONTAINER_NAME="fastapi-ml-app"
          PORT="6670"
          
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          docker rmi $IMAGE_NAME 2>/dev/null || true
          
          docker pull $IMAGE_NAME
          
          docker run -d \
            --name $CONTAINER_NAME \
            -p $PORT:$PORT \
            --restart unless-stopped \
            --health-cmd="curl -f http://localhost:$PORT/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            $IMAGE_NAME
            
          sleep 20
          
          if ! docker ps | grep -q $CONTAINER_NAME; then
            docker logs $CONTAINER_NAME --tail 20
            exit 1
          fi
          
          if curl -f http://localhost:$PORT/ >/dev/null 2>&1; then
            echo "API répond correctement"
          else
            docker logs $CONTAINER_NAME --tail 20
            exit 1
          fi
          
          response=$(curl -s "http://localhost:$PORT/predict?size=180&nb_rooms=3&garden=true")
          if echo "$response" | grep -q "y_pred"; then
            echo "Test de prédiction réussi"
            echo "Réponse: $response"
          else
            echo "Test de prédiction échoué"
            exit 1
          fi
          
          docker image prune -f
          echo "Déploiement terminé avec succès!" 